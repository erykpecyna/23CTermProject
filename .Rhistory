Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
AStripped <- cbind(A.eig[,1], A.eig[,2], 0, 0, 0, 0, 0, 0, 0)
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed)
}
PCA(Attributes)
head(Attributes)
cbind(0,0,0)
test <- c(1,2,3)
cbind(test. 0,0,0)
cbind(test, 0,0,0)
cbind(test, rep(3,3))
cbind(test, rep(3,4))
cbind(test, rep(test,3))
rep.col(1:3, 5)
matrix?
w
?matrix
matrix(0, nrow=3, ncol = 3)
#Reconstruct data using only first n eigenvectors with biggest eigenvalues
PCA <- function(RawData) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
Data.EigSort <- data.frame(data$artist_name, v1=Data.eig[,1])
eigenOrderedv1 <- ((data[order(Data.EigSort$v1),])); eigenOrderedv1
A.reconstruct <- Data.eig%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
AStripped <- cbind(A.eig[,1], A.eig[,2], 0, 0, 0, 0, 0, 0, 0)
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed)
}
fillZeroes(4)
#Reconstruct data using only first n eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
Data.EigSort <- data.frame(data$artist_name, v1=Data.eig[,1])
eigenOrderedv1 <- ((data[order(Data.EigSort$v1),])); eigenOrderedv1
A.reconstruct <- Data.eig%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
AStripped <- cbind(A.eig[,1:n])
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed)
}
#Reconstruct data using only first n eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
Data.EigSort <- data.frame(data$artist_name, v1=Data.eig[,1])
eigenOrderedv1 <- ((data[order(Data.EigSort$v1),])); eigenOrderedv1
A.reconstruct <- Data.eig%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
AStripped <- cbind(A.eig[,1:nV], fillZeroes(numCol-nV))
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed)
}
Attributes <- cbind(data$danceability, data$energy, data$loudness,
data$speechiness, data$acousticness, data$instrumentalness,
data$liveness, data$valence, data$tempo)
PCA(Attributes)
PCA(Attributes, 2)
Attributes <- cbind(data$danceability, data$energy, data$loudness,
data$speechiness, data$acousticness, data$instrumentalness,
data$liveness, data$valence, data$tempo)
numRow <- nrow(data)
numCol <- length(Attributes[1,])
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
S <- t(Adjusted)%*%Adjusted
Eig <- eigen(S)
Eig$values
P <- Eig$vectors
PInv <- solve(P)
A.eig <- Adjusted%*%P
TRACK.eig <- data.frame(data$artist_name, v1=A.eig[,1], v2=A.eig[,2])
eigenOrderedv1 <- ((data[order(TRACK.eig$v1),])); eigenOrderedv1
eigenOrderedv2 <- ((data[order(TRACK.eig$v2),])); eigenOrderedv2
A.reconstruct <- A.eig%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
AStripped <- cbind(A.eig[,1], A.eig[,2], 0, 0, 0, 0, 0, 0, 0)
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
PCA(Attributes, 2)
#Reconstruct data using only first n eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
A.reconstruct <- Data.eig%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
AStripped <- cbind(A.eig[,1:nV], fillZeroes(numCol-nV))
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed)
}
Attributes <- cbind(data$danceability, data$energy, data$loudness,
data$speechiness, data$acousticness, data$instrumentalness,
data$liveness, data$valence, data$tempo)
numRow <- nrow(data)
numCol <- length(Attributes[1,])
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
S <- t(Adjusted)%*%Adjusted
Eig <- eigen(S)
Eig$values
P <- Eig$vectors
PInv <- solve(P)
A.eig <- Adjusted%*%P
TRACK.eig <- data.frame(data$artist_name, v1=A.eig[,1], v2=A.eig[,2])
eigenOrderedv1 <- ((data[order(TRACK.eig$v1),])); eigenOrderedv1
eigenOrderedv2 <- ((data[order(TRACK.eig$v2),])); eigenOrderedv2
A.reconstruct <- A.eig%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
AStripped <- cbind(A.eig[,1], A.eig[,2], 0, 0, 0, 0, 0, 0, 0)
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
PCA(Attributes)
PCA(Attributes, 2)
PCA(Attributes, 20)
PCA(Attributes, 9)
head(Attributes)
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
fillZeroes(0)
matrix(0,0,0)
matrix(0,3,0)
A <- matrix(0,3,0)
cbind(2, A)
PCA(Attributes, 9)
head(Attributes)
PCA(Attributes, 10)
#Reconstruct data using only first n eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
A.reconstruct <- Data.eig%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
AStripped <- cbind(Data.eig[,1:nV], fillZeroes(numCol-nV))
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed)
}
PCA(Attributes, 9)
head(Attributes)
PCA(Attributes, 2) - Attributes
head(Attributes)
PCA(Attributes, 2)
nrow(PCA(Attributes, 2))
nrow(Attributes
s
nrow(Attributes)
#Reconstruct data using only first nV eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
A.reconstruct <- Data.eig%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
AStripped <- cbind(Data.eig[,1:nV], fillZeroes(numCol-nV))
A.reconstruct <- AStripped%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
Reconstructed
}
PCA(Attributes, 2) - Attributes
colMeans(PCA(Attributes, 2) - Attributes)
colMeans(PCA(Attributes, 1) - Attributes)
colMeans(PCA(Attributes, 0) - Attributes)
colMeans(PCA(Attributes, 9) - Attributes)
colMeans(PCA(Attributes, 1) - Attributes)
testStuff <- PCA(Attributes, 2) - Attributes
View(S)
View(testStuff)
colMeans(Attributes)
colMeans(PCA(Attributes, 2))
head(Attributes)
head(PCA(Attributes))
rowMeans(PCA(Attributes, 0) - Attributes)
rowMeans(PCA(Attributes, 2) - Attributes)
colMeans(PCA(Attributes, 2) - Attributes)
#Additional Point 1 - lots of columns baby
#Additional Point 2 - The data set is large enough that we can use it as a population to
#                     draw samples from
library(tidyverse)
data <- read.csv("TrackData.csv")
mode_lab <- c("Major", "Minor")
mode_count <- c(sum(data$mode == 1), sum(data$mode == 0))
barplot(mode_count, xlab = "Mode", ylab = "Counts", col = "darkmagenta", names.arg = mode_lab, main = "Mode Barplot")
par(mar=c(3,3,1,1))
hist(data$danceability,
breaks="FD",
freq=FALSE,
col="darkmagenta",
xlab = "Danceability",
main = "Danceability Probabilty Density")
curve(dnorm(x, mean(data$danceability), sqrt(var(data$danceability))), add = TRUE, lwd = 3, lty = 4)
perm.test <- function(x, y, z, n) {
mu.z = mean(x[y == z])
mu.nz = mean(x[y != z])
permutations = numeric(n)
for (i in 1:n) {
resample = sample(x)
zs = resample[1:(length(x)/2)]
nzs = resample[(length(x)/2+1):length(x)]
permutations[i] = mean(zs) - mean(nzs)
}
hist(permutations, freq = FALSE)
test.statistic = mu.z - mu.nz
abline(v = test.statistic, lwd = 3)
print("p-value:")
print(2*mean(permutations < test.statistic))
var.p = var(x) * 2 / (length(x)/2)
curve(dnorm(x, mean = 0, sd = sqrt(var.p)), add = TRUE, lwd = 3)
}
perm.test(data$danceability, data$explicit, FALSE, 10000)
plot(data$energy, data$Position)
linreg <- function(xCol, yCol, xLabel = "X", yLable = "Y") {
#Basis Vectors for the vector space single degree polynomial functions
m1 <- rep(1, length(xCol))
m2 <- xCol
#Projection Matrix approach
A <- cbind(m1, m2)
B <- t(A)%*%A
BInv <- solve(B)
P <- A%*%BInv%*%t(A)
Projection <- P%*%yCol
plot(xCol, yCol, pch = ".", cex = 2)
points(xCol, Projection, col = "darkmagenta", pch =".", cex = 3)
return((BInv%*%t(A)%*%yCol)[2])
}
linreg(data$danceability[data$year == 2014], data$Position[data$year == 2014])
linreg(data$energy, data$Position)
linreg(data$loudness, data$Position)
linreg(data$speechiness, data$Position)
linreg(data$energy, data$Position)
#Reconstruct data using only first nV eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
A.reconstruct <- Data.eig%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
AStripped <- cbind(Data.eig[,1:nV], fillZeroes(numCol-nV))
A.reconstruct <- AStripped%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
Reconstructed
}
Attributes <- cbind(data$danceability, data$energy, data$loudness,
data$speechiness, data$acousticness, data$instrumentalness,
data$liveness, data$valence, data$tempo)
numRow <- nrow(data)
numCol <- length(Attributes[1,])
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
S <- t(Adjusted)%*%Adjusted
Eig <- eigen(S)
Eig$values
testMat <- matrix(c(1,2,3,4), c(2,4,6,8), c(3,6,9,12))
testMat <- cbind(c(1,2,3,4), c(2,4,6,8), c(3,6,9,12))
testMat
PCA(testMat)
#Reconstruct data using only first nV eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
A.reconstruct <- Data.eig%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(RawData), scale = FALSE)
AStripped <- cbind(Data.eig[,1:nV], fillZeroes(numCol-nV))
A.reconstruct <- AStripped%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
Reconstructed
}
PCA(testMat)
#Reconstruct data using only first nV eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
A.reconstruct <- Data.eig%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(RawData), scale = FALSE)
AStripped <- cbind(Data.eig[,1:nV], fillZeroes(numCol-nV))
A.reconstruct <- AStripped%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(RawData), scale = FALSE)
Reconstructed
}
PCA(testMat)
#Reconstruct data using only first nV eigenvectors with biggest eigenvalues
PCA <- function(RawData, nV = 1) {
numRow <- nrow(RawData)
numCol <- length(RawData[1,])
fillZeroes <- function(numCols) {
matrix(0, nrow = numRow, ncol = numCols)
}
Adjusted <- scale(RawData, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
#Additional point 16: Appropriate use of covariance matrix
S <- var(RawData)
Eig <- eigen(S)
P <- Eig$vectors
PInv <- solve(P)
#This is the centered data represented in terms of basis of eigenvectors
Data.eig <- Adjusted%*%P
A.reconstruct <- Data.eig%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(RawData), scale = FALSE)
AStripped <- cbind(Data.eig[,1:nV], fillZeroes(numCol-nV))
A.reconstruct <- AStripped%*%PInv
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(RawData), scale = FALSE)
Reconstructed
}
PCA(testMat)
PCA(testMat,3)
testMat <- cbind(c(1,2,3,4), c(2,4,6,8), c(3,6,9,11))
PCA(testMat)
PCA(testMat,3)
Attributes <- cbind(data$danceability, data$energy, data$loudness,
data$speechiness, data$acousticness, data$instrumentalness,
data$liveness, data$valence, data$tempo)
numRow <- nrow(data)
numCol <- length(Attributes[1,])
Adjusted <- scale(Attributes, center=TRUE, scale = c(rep(sqrt(numRow-1), numCol)))
S <- t(Adjusted)%*%Adjusted
Eig <- eigen(S)
Eig$values #The first two values are much bigger than the others
P <- Eig$vectors
PInv <- solve(P)
A.eig <- Adjusted%*%P
eigOrder <- data.frame(data$artist_name, v1=A.eig[,1], v2=A.eig[,2])
eigenOrderedv1 <- ((data[order(eigOrder$v1),])); eigenOrderedv1
eigenOrderedv1 <- ((data[order(eigOrder$v1),])); tail(eigenOrderedv1)
eigenOrderedv1 <- ((data[order(eigOrder$v1),])); eigenOrderedv1
#This eigenvector seems to represent how fast a song is, as when we sort by
#this first eigenvector, it is almost the same as sorting by tempo
eigenOrderedv1 <- ((data[order(eigOrder$v1),])); head(eigenOrderedv1); head(((data[order(data$tempo),])))
#This eigenvector seems to represent how loud a song is, as sorting by this
#eigenvector yields similar results to sorting by loudness
eigenOrderedv2 <- ((data[order(eigOrder$v2),]))
eigenOrderedv2; head(((data[order(data$loudness),])))
head(eigenOrderedv2); head(((data[order(data$loudness),])))
View(eigenOrderedv1)
View(eigenOrderedv2)
#This eigenvector seems to represent how loud a song is, as loudness increases
#steadily when going down the matrix sorted by this eigenvector
eigenOrderedv2 <- ((data[order(eigOrder$v2),]))
head(eigenOrderedv2); tail(eigenOrderedv2)
head(eigenOrderedv2$loudness); tail(eigenOrderedv2$loudness)
head(eigenOrderedv1$track_name); head(((data[order(data$tempo),]$track_name)))
A.reconstruct <- A.eig%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
#This is the same reconstruction yielded by the PCA function
head(PCA(Attributes, 2)); head(Reconstructed)
AStripped <- cbind(A.eig[,1], A.eig[,2], 0, 0, 0, 0, 0, 0, 0)
A.reconstruct <- AStripped%*%PInv
head(A.reconstruct); head(Adjusted)
Reconstructed <- scale(A.reconstruct, scale = c(rep(1/sqrt(numRow-1), numCol)))
Reconstructed <- scale(Reconstructed, center = -colMeans(Attributes), scale = FALSE)
head(Reconstructed); head(Attributes)
#This is the same reconstruction yielded by the PCA function
head(PCA(Attributes, 2)); head(Reconstructed)
#As we can see, reconstructing from only the first eigenvalue yields
#a good reconstruction of tempo but not much else
PCA(Attributes)
#As we can see, reconstructing from only the first eigenvalue yields
#a good reconstruction of tempo (column 9) but not much else
head(PCA(Attributes)); head(Attributes)
